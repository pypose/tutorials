
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/lietensor_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_lietensor_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_lietensor_tutorial.py:


LieTensor Tutorial
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-11

.. code-block:: default


    import torch
    import pypose as pp









.. GENERATED FROM PYTHON SOURCE LINES 12-15

1. Intialization
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 15-24

.. code-block:: default


    a = pp.so3(torch.randn(2,3))
    x = pp.identity_SE3(2,1)
    y = pp.randn_se3(2,2)
    print('a:', a, '\nx.shape:', x.shape, '\nx.gshape:', x.lshape)
    print(x.lview(2))
    print(y)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    a: so3Type LieTensor:
    LieTensor([[ 0.0715,  0.1534,  1.0294],
               [ 1.2860,  0.7816, -0.9997]]) 
    x.shape: torch.Size([2, 1, 7]) 
    x.gshape: torch.Size([2, 1])
    SE3Type LieTensor:
    LieTensor([[0., 0., 0., 0., 0., 0., 1.],
               [0., 0., 0., 0., 0., 0., 1.]])
    se3Type LieTensor:
    LieTensor([[[ 0.0692,  1.4889,  0.4124, -0.3089, -0.8641, -1.4701],
                [-0.1599,  0.7383,  1.2609, -1.9158,  2.0443,  0.0761]],

               [[-1.4283, -1.4922, -0.1223, -0.9169,  1.1653, -1.3378],
                [ 1.1604,  0.5560,  0.4367,  0.1432,  0.5526,  1.2847]]])




.. GENERATED FROM PYTHON SOURCE LINES 25-28

All arguments in PyTorch are supported
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 28-36

.. code-block:: default


    a = pp.randn_SO3(3, device="cuda:0", dtype=torch.double, requires_grad=True)
    b = pp.identity_like(a, device="cpu")
    a, b
    t = a.float()
    a, t






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (SO3Type LieTensor:
    LieTensor([[-0.4175, -0.0036, -0.0734,  0.9057],
               [-0.5080,  0.1298, -0.0486,  0.8501],
               [-0.4618, -0.5467,  0.0525,  0.6965]], device='cuda:0',
              dtype=torch.float64, requires_grad=True), SO3Type LieTensor:
    LieTensor([[-0.4175, -0.0036, -0.0734,  0.9057],
               [-0.5080,  0.1298, -0.0486,  0.8501],
               [-0.4618, -0.5467,  0.0525,  0.6965]], device='cuda:0',
              grad_fn=<AliasBackward0>))



.. GENERATED FROM PYTHON SOURCE LINES 37-40

2. Slicing and Shaping
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 40-55

.. code-block:: default


    A = pp.randn_SO3(2,2)
    B = pp.randn_SO3(2,1)
    C = torch.cat([A,B], dim=1)         # Tensor cat
    C[0,1] = pp.randn_SO3(1)            # Slicing set
    D = C[1,:].Log()                    # Slicing get
    E, F = torch.split(C, [1,2], dim=1) # Tensor split
    print('A:', A.lshape)
    print('B:', B.lshape)
    print('C:', C.lshape)
    print('D:', D.lshape)
    print('E:', E.lshape)
    print('F:', F.lshape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A: torch.Size([2, 2])
    B: torch.Size([2, 1])
    C: torch.Size([2, 3])
    D: torch.Size([3])
    E: torch.Size([2, 1])
    F: torch.Size([2, 2])




.. GENERATED FROM PYTHON SOURCE LINES 56-59

3. Basic Operations
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default


    (x * y.Exp()).Inv().Log()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    se3Type LieTensor:
    LieTensor([[[-0.0692, -1.4889, -0.4124,  0.3089,  0.8641,  1.4701],
                [ 0.1599, -0.7383, -1.2609,  1.9158, -2.0443, -0.0761]],

               [[ 1.4283,  1.4922,  0.1223,  0.9169, -1.1653,  1.3378],
                [-1.1604, -0.5560, -0.4367, -0.1432, -0.5526, -1.2847]]])



.. GENERATED FROM PYTHON SOURCE LINES 64-67

4. Adjoint Transforms
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 67-79

.. code-block:: default


    X = pp.randn_Sim3(6, dtype=torch.double)
    a = pp.randn_sim3(6, dtype=torch.double)
    b = X.AdjT(a)
    print((X * b.Exp() - a.Exp() * X).abs().mean() < 1e-7)

    X = pp.randn_SE3(8)
    a = pp.randn_se3(8)
    b = X.Adj(a)
    print((b.Exp() * X - X * a.Exp()).abs().mean() < 1e-7)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor(True)
    tensor(False)




.. GENERATED FROM PYTHON SOURCE LINES 80-83

5. Grdients
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 83-92

.. code-block:: default


    x = pp.randn_so3(3, sigma=0.1, requires_grad=True, device="cuda")
    assert x.is_leaf
    loss = (x.Exp().Log()**2).sin().sum() # Just test, No physical meaning
    loss.backward()
    y = x.detach()
    loss, x.grad, x, y






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (tensor(0.0710, device='cuda:0', grad_fn=<SumBackward0>), tensor([[ 0.1495, -0.2627, -0.0877],
            [-0.2269,  0.2133, -0.0618],
            [-0.0019, -0.1569, -0.2441]], device='cuda:0'), so3Type LieTensor:
    LieTensor([[ 0.0747, -0.1313, -0.0438],
               [-0.1135,  0.1067, -0.0309],
               [-0.0009, -0.0785, -0.1221]], device='cuda:0', requires_grad=True), so3Type LieTensor:
    LieTensor([[ 0.0747, -0.1313, -0.0438],
               [-0.1135,  0.1067, -0.0309],
               [-0.0009, -0.0785, -0.1221]], device='cuda:0'))



.. GENERATED FROM PYTHON SOURCE LINES 93-96

6. Test a Module
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 96-129

.. code-block:: default


    from torch import nn

    def count_parameters(model):
        return sum(p.numel() for p in model.parameters() if p.requires_grad)

    class TestNet(nn.Module):
        def __init__(self, n):
            super().__init__()
            self.weight = pp.Parameter(pp.randn_so3(n))

        def forward(self, x):
            return self.weight.Exp() * x


    n,epoch = 4, 5
    net = TestNet(n).cuda()

    optimizer = torch.optim.SGD(net.parameters(), lr = 0.2, momentum=0.9)
    scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[2,4], gamma=0.5)

    print("Before Optimization:\n", net.weight)
    for i in range(epoch):
        optimizer.zero_grad()
        inputs = pp.randn_SO3(n).cuda()
        outputs = net(inputs)
        loss = outputs.abs().sum()
        loss.backward()
        optimizer.step()
        scheduler.step()
        print(loss)

    print("Parameter:", count_parameters(net))
    print("After Optimization:\n", net.weight)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Before Optimization:
     so3Type Parameter:
    Parameter containing:
    Parameter(Parameter([[ 0.1939,  0.5800,  0.3151],
               [-0.4851, -1.8635, -1.6563],
               [-0.3857,  0.6101,  0.9108],
               [ 0.2577,  0.1659,  1.9587]], device='cuda:0', requires_grad=True))
    tensor(6.8084, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(7.1588, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(6.7525, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(6.8900, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(7.2370, device='cuda:0', grad_fn=<SumBackward0>)
    Parameter: 12
    After Optimization:
     so3Type Parameter:
    Parameter containing:
    Parameter(Parameter([[-0.3821, -0.0452, -0.0019],
               [-0.5272, -0.6633, -0.4910],
               [-1.3067,  1.0494,  0.4543],
               [-0.0779,  0.3724,  0.8483]], device='cuda:0', requires_grad=True))





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.010 seconds)


.. _sphx_glr_download_beginner_lietensor_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lietensor_tutorial.py <lietensor_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lietensor_tutorial.ipynb <lietensor_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
