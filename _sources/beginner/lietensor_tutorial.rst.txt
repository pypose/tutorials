
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/lietensor_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_lietensor_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_lietensor_tutorial.py:


LieTensor Tutorial
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-11

.. code-block:: default


    import torch
    import pypose as pp









.. GENERATED FROM PYTHON SOURCE LINES 12-15

1. Intialization
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 15-24

.. code-block:: default


    a = pp.so3(torch.randn(2,3))
    x = pp.identity_SE3(2,1)
    y = pp.randn_se3(2,2)
    print('a:', a, '\nx.shape:', x.shape, '\nx.gshape:', x.lshape)
    print(x.lview(2))
    print(y)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    a: so3Type LieTensor:
    LieTensor([[-2.2638, -0.4771,  1.5078],
               [ 0.3542, -0.3725, -1.3291]]) 
    x.shape: torch.Size([2, 1, 7]) 
    x.gshape: torch.Size([2, 1])
    SE3Type LieTensor:
    LieTensor([[0., 0., 0., 0., 0., 0., 1.],
               [0., 0., 0., 0., 0., 0., 1.]])
    se3Type LieTensor:
    LieTensor([[[ 0.5694,  1.6048,  0.1480,  0.6726, -0.5059, -0.9744],
                [ 0.2694,  0.3830,  0.2743,  1.0604,  0.3516, -0.1946]],

               [[-2.1244,  0.7299, -2.5000,  0.6875, -0.7015, -0.2474],
                [-1.1213, -0.7150,  1.6552, -1.8409,  0.7483, -0.2629]]])




.. GENERATED FROM PYTHON SOURCE LINES 25-28

All arguments in PyTorch are supported
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 28-36

.. code-block:: default


    a = pp.randn_SO3(3, device="cuda:0", dtype=torch.double, requires_grad=True)
    b = pp.identity_like(a, device="cpu")
    a, b
    t = a.float()
    a, t






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (SO3Type LieTensor:
    LieTensor([[ 0.2429,  0.2401,  0.2155,  0.9148],
               [-0.5643,  0.1867,  0.5538,  0.5831],
               [-0.3532, -0.7846,  0.2573,  0.4399]], device='cuda:0',
              dtype=torch.float64, requires_grad=True), SO3Type LieTensor:
    LieTensor([[ 0.2429,  0.2401,  0.2155,  0.9148],
               [-0.5643,  0.1867,  0.5538,  0.5831],
               [-0.3532, -0.7846,  0.2573,  0.4399]], device='cuda:0',
              grad_fn=<AliasBackward0>))



.. GENERATED FROM PYTHON SOURCE LINES 37-40

2. Slicing and Shaping
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 40-55

.. code-block:: default


    A = pp.randn_SO3(2,2)
    B = pp.randn_SO3(2,1)
    C = torch.cat([A,B], dim=1)         # Tensor cat
    C[0,1] = pp.randn_SO3(1)            # Slicing set
    D = C[1,:].Log()                    # Slicing get
    E, F = torch.split(C, [1,2], dim=1) # Tensor split
    print('A:', A.lshape)
    print('B:', B.lshape)
    print('C:', C.lshape)
    print('D:', D.lshape)
    print('E:', E.lshape)
    print('F:', F.lshape)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A: torch.Size([2, 2])
    B: torch.Size([2, 1])
    C: torch.Size([2, 3])
    D: torch.Size([3])
    E: torch.Size([2, 1])
    F: torch.Size([2, 2])




.. GENERATED FROM PYTHON SOURCE LINES 56-59

3. Basic Operations
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: default


    (x * y.Exp()).Inv().Log()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    se3Type LieTensor:
    LieTensor([[[-0.5694, -1.6048, -0.1480, -0.6726,  0.5059,  0.9744],
                [-0.2694, -0.3830, -0.2743, -1.0604, -0.3516,  0.1946]],

               [[ 2.1244, -0.7299,  2.5000, -0.6875,  0.7015,  0.2474],
                [ 1.1213,  0.7150, -1.6552,  1.8409, -0.7483,  0.2629]]])



.. GENERATED FROM PYTHON SOURCE LINES 64-67

4. Adjoint Transforms
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 67-79

.. code-block:: default


    X = pp.randn_Sim3(6, dtype=torch.double)
    a = pp.randn_sim3(6, dtype=torch.double)
    b = X.AdjT(a)
    print((X * b.Exp() - a.Exp() * X).abs().mean() < 1e-7)

    X = pp.randn_SE3(8)
    a = pp.randn_se3(8)
    b = X.Adj(a)
    print((b.Exp() * X - X * a.Exp()).abs().mean() < 1e-7)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor(True)
    tensor(False)




.. GENERATED FROM PYTHON SOURCE LINES 80-83

5. Grdients
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 83-92

.. code-block:: default


    x = pp.randn_so3(3, sigma=0.1, requires_grad=True, device="cuda")
    assert x.is_leaf
    loss = (x.Exp().Log()**2).sin().sum() # Just test, No physical meaning
    loss.backward()
    y = x.detach()
    loss, x.grad, x, y






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (tensor(0.1205, device='cuda:0', grad_fn=<SumBackward0>), tensor([[-0.0977, -0.0482, -0.1812],
            [ 0.1555, -0.3701, -0.1870],
            [-0.1725,  0.2448, -0.3887]], device='cuda:0'), so3Type LieTensor:
    LieTensor([[-0.0488, -0.0241, -0.0906],
               [ 0.0777, -0.1852, -0.0935],
               [-0.0862,  0.1224, -0.1945]], device='cuda:0', requires_grad=True), so3Type LieTensor:
    LieTensor([[-0.0488, -0.0241, -0.0906],
               [ 0.0777, -0.1852, -0.0935],
               [-0.0862,  0.1224, -0.1945]], device='cuda:0'))



.. GENERATED FROM PYTHON SOURCE LINES 93-96

6. Test a Module
---------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 96-129

.. code-block:: default


    from torch import nn

    def count_parameters(model):
        return sum(p.numel() for p in model.parameters() if p.requires_grad)

    class TestNet(nn.Module):
        def __init__(self, n):
            super().__init__()
            self.weight = pp.Parameter(pp.randn_so3(n))

        def forward(self, x):
            return self.weight.Exp() * x


    n,epoch = 4, 5
    net = TestNet(n).cuda()

    optimizer = torch.optim.SGD(net.parameters(), lr = 0.2, momentum=0.9)
    scheduler = torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones=[2,4], gamma=0.5)

    print("Before Optimization:\n", net.weight)
    for i in range(epoch):
        optimizer.zero_grad()
        inputs = pp.randn_SO3(n).cuda()
        outputs = net(inputs)
        loss = outputs.abs().sum()
        loss.backward()
        optimizer.step()
        scheduler.step()
        print(loss)

    print("Parameter:", count_parameters(net))
    print("After Optimization:\n", net.weight)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Before Optimization:
     so3Type Parameter:
    Parameter containing:
    Parameter(Parameter([[ 0.9853,  0.7453,  0.5795],
               [ 1.0430, -0.9287,  0.6975],
               [-0.0814,  0.8786,  0.7938],
               [ 2.4384,  1.2223, -1.2418]], device='cuda:0', requires_grad=True))
    tensor(7.1409, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(6.8957, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(6.7648, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(6.3195, device='cuda:0', grad_fn=<SumBackward0>)
    tensor(7.0756, device='cuda:0', grad_fn=<SumBackward0>)
    Parameter: 12
    After Optimization:
     so3Type Parameter:
    Parameter containing:
    Parameter(Parameter([[ 0.2744,  0.1266,  0.0272],
               [ 0.3458,  0.1767,  0.1380],
               [ 0.0524,  0.1763,  0.6429],
               [ 2.2414,  0.5162, -1.1565]], device='cuda:0', requires_grad=True))





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.786 seconds)


.. _sphx_glr_download_beginner_lietensor_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lietensor_tutorial.py <lietensor_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lietensor_tutorial.ipynb <lietensor_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
