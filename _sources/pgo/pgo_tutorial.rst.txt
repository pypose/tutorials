
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "pgo/pgo_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_pgo_pgo_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_pgo_pgo_tutorial.py:


Pose Graph Optimization Tutorial
================================

.. GENERATED FROM PYTHON SOURCE LINES 6-22

.. code-block:: default



    import os
    import torch
    import argparse
    import pypose as pp
    from torch import nn
    from pgo_dataset import G2OPGO
    import matplotlib.pyplot as plt
    import pypose.optim.solver as ppos
    import pypose.optim.kernel as ppok
    import pypose.optim.corrector as ppoc
    import pypose.optim.strategy as ppost
    from pypose.optim.scheduler import StopOnPlateau









.. GENERATED FROM PYTHON SOURCE LINES 23-25

Preparation
------------

.. GENERATED FROM PYTHON SOURCE LINES 25-78

.. code-block:: default

    class PoseGraph(nn.Module):

        def __init__(self, nodes):
            super().__init__()
            self.nodes = pp.Parameter(nodes)

        def forward(self, edges, poses):
            node1 = self.nodes[edges[..., 0]]
            node2 = self.nodes[edges[..., 1]]
            error = poses.Inv() @ node1.Inv() @ node2
            return error.Log().tensor()


    @torch.no_grad()
    def plot_and_save(points, pngname, title='', axlim=None):
        points = points.detach().cpu().numpy()
        plt.figure(figsize=(7, 7))
        ax = plt.axes(projection='3d')
        ax.plot3D(points[:,0], points[:,1], points[:,2], 'b')
        plt.title(title)
        if axlim is not None:
            ax.set_xlim(axlim[0])
            ax.set_ylim(axlim[1])
            ax.set_zlim(axlim[2])
        plt.savefig(pngname)
        print('Saving to', pngname)
        return ax.get_xlim(), ax.get_ylim(), ax.get_zlim()


    parser = argparse.ArgumentParser(description='Pose Graph Optimization')
    parser.add_argument("--device", type=str, default='cuda:0', help="cuda or cpu")
    parser.add_argument("--radius", type=float, default=1e4, help="trust region radius")
    parser.add_argument("--save", type=str, default='../dataset/pgo/save/', help="files location to save")
    parser.add_argument("--dataroot", type=str, default='../dataset/pgo', help="dataset location")
    parser.add_argument("--dataname", type=str, default='parking-garage.g2o', help="dataset name")
    parser.add_argument('--no-vectorize', dest='vectorize', action='store_false', help="to save memory")
    parser.add_argument('--vectorize', action='store_true', help='to accelerate computation')
    parser.set_defaults(vectorize=False)
    args = parser.parse_args(); print(args)
    os.makedirs(os.path.join(args.save), exist_ok=True)

    data = G2OPGO(args.dataroot, args.dataname, device=args.device)
    edges, poses, infos = data.edges, data.poses, data.infos

    graph = PoseGraph(data.nodes).to(args.device)
    solver = ppos.Cholesky()
    strategy = ppost.TrustRegion(radius=args.radius)
    optimizer = pp.optim.LM(graph, solver=solver, strategy=strategy, min=1e-6, vectorize=args.vectorize)
    scheduler = StopOnPlateau(optimizer, steps=10, patience=3, decreasing=1e-3, verbose=True)

    pngname = os.path.join(args.save, args.dataname+'.png')
    axlim = plot_and_save(graph.nodes.translation(), pngname, args.dataname)




.. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_001.png
   :alt: parking-garage.g2o
   :srcset: /pgo/images/sphx_glr_pgo_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Namespace(device='cuda:0', radius=10000.0, save='../dataset/pgo/save/', dataroot='../dataset/pgo', dataname='parking-garage.g2o', vectorize=False)
    Saving to ../dataset/pgo/save/parking-garage.g2o.png




.. GENERATED FROM PYTHON SOURCE LINES 79-81

the 1st implementation: for customization and easy to extend
-------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-91

.. code-block:: default


    while scheduler.continual:
        loss = optimizer.step(input=(edges, poses), weight=infos)
        scheduler.step(loss)

        name = os.path.join(args.save, args.dataname + '_' + str(scheduler.steps))
        title = 'PyPose PGO at the %d step(s) with loss %7f'%(scheduler.steps, loss.item())
        plot_and_save(graph.nodes.translation(), name+'.png', title, axlim=axlim)
        torch.save(graph.state_dict(), name+'.pt')




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_002.png
         :alt: PyPose PGO at the 1 step(s) with loss 5.650377
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_003.png
         :alt: PyPose PGO at the 2 step(s) with loss 1.996684
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_004.png
         :alt: PyPose PGO at the 3 step(s) with loss 1.385963
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_005.png
         :alt: PyPose PGO at the 4 step(s) with loss 1.300411
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_006.png
         :alt: PyPose PGO at the 5 step(s) with loss 1.283956
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_007.png
         :alt: PyPose PGO at the 6 step(s) with loss 1.276590
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_008.png
         :alt: PyPose PGO at the 7 step(s) with loss 1.272300
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_009.png
         :alt: PyPose PGO at the 8 step(s) with loss 1.270145
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_010.png
         :alt: PyPose PGO at the 9 step(s) with loss 1.269167
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /pgo/images/sphx_glr_pgo_tutorial_011.png
         :alt: PyPose PGO at the 10 step(s) with loss 1.268797
         :srcset: /pgo/images/sphx_glr_pgo_tutorial_011.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    StopOnPlateau on step 0 Loss 1.672720e+04 --> Loss 5.650377e+00 (reduction/loss: 9.9966e-01).
    Saving to ../dataset/pgo/save/parking-garage.g2o_1.png
    StopOnPlateau on step 1 Loss 5.650377e+00 --> Loss 1.996684e+00 (reduction/loss: 6.4663e-01).
    Saving to ../dataset/pgo/save/parking-garage.g2o_2.png
    StopOnPlateau on step 2 Loss 1.996684e+00 --> Loss 1.385963e+00 (reduction/loss: 3.0587e-01).
    Saving to ../dataset/pgo/save/parking-garage.g2o_3.png
    StopOnPlateau on step 3 Loss 1.385963e+00 --> Loss 1.300411e+00 (reduction/loss: 6.1728e-02).
    Saving to ../dataset/pgo/save/parking-garage.g2o_4.png
    StopOnPlateau on step 4 Loss 1.300411e+00 --> Loss 1.283956e+00 (reduction/loss: 1.2654e-02).
    Saving to ../dataset/pgo/save/parking-garage.g2o_5.png
    StopOnPlateau on step 5 Loss 1.283956e+00 --> Loss 1.276590e+00 (reduction/loss: 5.7364e-03).
    Saving to ../dataset/pgo/save/parking-garage.g2o_6.png
    StopOnPlateau on step 6 Loss 1.276590e+00 --> Loss 1.272300e+00 (reduction/loss: 3.3609e-03).
    Saving to ../dataset/pgo/save/parking-garage.g2o_7.png
    StopOnPlateau on step 7 Loss 1.272300e+00 --> Loss 1.270145e+00 (reduction/loss: 1.6936e-03).
    Saving to ../dataset/pgo/save/parking-garage.g2o_8.png
    StopOnPlateau on step 8 Loss 1.270145e+00 --> Loss 1.269167e+00 (reduction/loss: 7.6989e-04).
    Saving to ../dataset/pgo/save/parking-garage.g2o_9.png
    StopOnPlateau on step 9 Loss 1.269167e+00 --> Loss 1.268797e+00 (reduction/loss: 2.9202e-04).
    StopOnPlateau: Maximum steps reached, Quiting..
    Saving to ../dataset/pgo/save/parking-garage.g2o_10.png




.. GENERATED FROM PYTHON SOURCE LINES 92-94

The 2nd implementation: equivalent to the 1st one, but more compact
--------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 94-95

.. code-block:: default

    scheduler.optimize(input=(edges, poses), weight=infos)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 38 minutes  33.176 seconds)


.. _sphx_glr_download_pgo_pgo_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: pgo_tutorial.py <pgo_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: pgo_tutorial.ipynb <pgo_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
