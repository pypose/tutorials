
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "dynamics/cartpole_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_dynamics_cartpole_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_dynamics_cartpole_tutorial.py:


Cartpole Tutorial
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-12

.. code-block:: default

    from pypose.module.dynamics import System
    import torch as torch
    import numpy as np
    import matplotlib.pyplot as plt
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")








.. GENERATED FROM PYTHON SOURCE LINES 13-17

Preparation
-------------
Create class for cart-pole dynamics


.. GENERATED FROM PYTHON SOURCE LINES 17-58

.. code-block:: default


    class CartPole(System):
        def __init__(self, dt, length, cartmass, polemass, gravity):
            super(CartPole, self).__init__()
            self.tau = dt
            self.length = length
            self.cartmass = cartmass
            self.polemass = polemass
            self.gravity = gravity
            self.polemassLength = self.polemass * self.length
            self.totalMass = self.cartmass + self.polemass

        def state_transition(self, state, input, t=None):
            x, xDot, theta, thetaDot = state
            force = input.squeeze()
            costheta = torch.cos(theta)
            sintheta = torch.sin(theta)

            temp = (force + self.polemassLength * thetaDot**2 * sintheta) / self.totalMass

            thetaAcc = (self.gravity * sintheta - costheta * temp) / \
                (self.length * (4.0 / 3.0 - self.polemass * costheta**2 / self.totalMass))
    
            xAcc = temp - self.polemassLength * thetaAcc * costheta / self.totalMass

            _dstate = torch.stack((xDot, xAcc, thetaDot, thetaAcc))

            return state + torch.mul(_dstate, self.tau)

        def observation(self, state, input, t=None):
            return state

    def createTimePlot(x, y, figname="Un-named plot", title=None, xlabel=None, ylabel=None):
        f = plt.figure(figname)
        plt.plot(x, y)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.title(title)
        return f









.. GENERATED FROM PYTHON SOURCE LINES 59-61

Create parameters for cart pole trajectory
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 61-69

.. code-block:: default


    dt = 0.01   # Delta t
    len = 1.5   # Length of pole
    m_cart = 20 # Mass of cart
    m_pole = 10 # Mass of pole
    g = 9.81    # Accerleration due to gravity
    N = 1000    # Number of time steps








.. GENERATED FROM PYTHON SOURCE LINES 70-71

Time and input

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: default


    time  = torch.arange(0, N+1) * dt
    input = torch.sin(time)







.. GENERATED FROM PYTHON SOURCE LINES 75-76

Initial state

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: default


    state = torch.tensor([0, 0, np.pi, 0], dtype=float)








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Create dynamics solver object

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    cartPoleSolver = CartPole(dt, len, m_cart, m_pole, g)








.. GENERATED FROM PYTHON SOURCE LINES 84-85

Calculate trajectory

.. GENERATED FROM PYTHON SOURCE LINES 85-92

.. code-block:: default


    state_all = torch.zeros(N+1, 4, dtype=float)
    state_all[0,:] = state

    for i in range(N):
        state_all[i+1], _ = cartPoleSolver(state_all[i], input[i])








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Create time plots to show dynamics

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: default


    x, xdot, theta, thetadot = state_all.T
    x_fig = createTimePlot(time, x, figname ="x Plot", xlabel="Time", ylabel="x", title="x Plot")
    xdot_fig = createTimePlot(time, xdot, figname="x dot Plot", xlabel="Time", ylabel="x dot", title="x dot Plot")
    theta_fig = createTimePlot(time, theta, figname="theta Plot", xlabel="Time", ylabel="theta", title="theta Plot")
    thetadot_fig = createTimePlot(time, thetadot, figname="theta dot Plot", xlabel="Time", ylabel="theta dot", title="theta dot Plot")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /dynamics/images/sphx_glr_cartpole_tutorial_001.png
         :alt: x Plot
         :srcset: /dynamics/images/sphx_glr_cartpole_tutorial_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /dynamics/images/sphx_glr_cartpole_tutorial_002.png
         :alt: x dot Plot
         :srcset: /dynamics/images/sphx_glr_cartpole_tutorial_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /dynamics/images/sphx_glr_cartpole_tutorial_003.png
         :alt: theta Plot
         :srcset: /dynamics/images/sphx_glr_cartpole_tutorial_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /dynamics/images/sphx_glr_cartpole_tutorial_004.png
         :alt: theta dot Plot
         :srcset: /dynamics/images/sphx_glr_cartpole_tutorial_004.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 102-103

Jacobian computation - Find jacobians at the last step

.. GENERATED FROM PYTHON SOURCE LINES 103-113

.. code-block:: default

    jacob_state, jacob_input = state_all[-1,:].mT, input[-1]
    cartPoleSolver.set_refpoint(state=jacob_state, input=jacob_input.unsqueeze(0), t=time[-1])
    A = cartPoleSolver.A
    B = cartPoleSolver.B
    C = cartPoleSolver.C
    D = cartPoleSolver.D
    c1 = cartPoleSolver.c1
    c2 = cartPoleSolver.c2

    plt.show()


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/tianhao/twu3/tutorials/dynamics_source/cartpole_tutorial.py", line 103, in <module>
        jacob_state, jacob_input = state_all[-1,:].mT, input[-1]
    RuntimeError: tensor.mT is only supported on matrices or batches of matrices. Got 1-D tensor.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.202 seconds)


.. _sphx_glr_download_dynamics_cartpole_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cartpole_tutorial.py <cartpole_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cartpole_tutorial.ipynb <cartpole_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
