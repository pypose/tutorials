
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "dynamics/floquet_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_dynamics_floquet_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_dynamics_floquet_tutorial.py:


Floquet Tutorial
==================

.. GENERATED FROM PYTHON SOURCE LINES 6-14

.. code-block:: default


    from pypose.module.dynamics import System
    import math
    import torch as torch
    import numpy as np
    import matplotlib.pyplot as plt
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")








.. GENERATED FROM PYTHON SOURCE LINES 15-19

Preparation
-------------
We consider a Floquet system, which is periodic and an example of time-varying systems


.. GENERATED FROM PYTHON SOURCE LINES 19-48

.. code-block:: default



    class Floquet(System):
        def __init__(self):
            super(Floquet, self).__init__()

        def state_transition(self, state, input, t):
            cc = torch.cos(2*math.pi*t/100)
            ss = torch.sin(2*math.pi*t/100)
            A = torch.tensor([
                [1., cc/10],
                [cc/10, 1.]])
            B = torch.tensor([
                [ss],
                [1.]])
            return (state.matmul(A) + B.matmul(input)).squeeze()

        def observation(self, state, input, t):
            return state + t

    def createTimePlot(x, y, figname="Un-named plot", title=None, xlabel=None, ylabel=None):
        f = plt.figure(figname)
        plt.plot(x, y)
        plt.xlabel(xlabel)
        plt.ylabel(ylabel)
        plt.title(title)
        return f









.. GENERATED FROM PYTHON SOURCE LINES 49-51

Number of time steps
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: default


    N = 100    









.. GENERATED FROM PYTHON SOURCE LINES 56-57

Time, Input, Initial state

.. GENERATED FROM PYTHON SOURCE LINES 57-62

.. code-block:: default


    time  = torch.arange(0, N+1)
    input = torch.sin(2*math.pi*time/50)
    state = torch.tensor([1., 1.])








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Create dynamics solver object

.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: default



    solver = Floquet()








.. GENERATED FROM PYTHON SOURCE LINES 69-71

Calculate trajectory


.. GENERATED FROM PYTHON SOURCE LINES 71-79

.. code-block:: default


    state_all = torch.zeros(N+1, 2)
    state_all[0] = state
    obser_all = torch.zeros(N, 2)

    for i in range(N):
        state_all[i+1], obser_all[i] = solver(state_all[i], input[i])








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Create time plots to show dynamics

.. GENERATED FROM PYTHON SOURCE LINES 81-92

.. code-block:: default


    f, ax = plt.subplots(nrows=4, sharex=True)
    for _i in range(2):
        ax[_i].plot(time, state_all[:,_i], label='pp')
        ax[_i].set_ylabel(f'State {_i}')
    for _i in range(2):
        ax[_i+2].plot(time[:-1], obser_all[:,_i], label='pp')
        ax[_i+2].set_ylabel(f'Observation {_i}')
    ax[-1].set_xlabel('time')
    ax[-1].legend()




.. image-sg:: /dynamics/images/sphx_glr_floquet_tutorial_001.png
   :alt: floquet tutorial
   :srcset: /dynamics/images/sphx_glr_floquet_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f506a082100>



.. GENERATED FROM PYTHON SOURCE LINES 93-94

Jacobian computation - Find jacobians at the last step

.. GENERATED FROM PYTHON SOURCE LINES 94-99

.. code-block:: default


    vars = ['A', 'B', 'C', 'D', 'c1', 'c2']
    solver.set_refpoint()
    [print(_v, getattr(solver, _v)) for _v in vars]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/tianhao/twu3/pypose/pypose/module/dynamics.py:198: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      self._ref_state = torch.tensor(self.state) if state is None else torch.atleast_1d(state)
    /home/tianhao/twu3/pypose/pypose/module/dynamics.py:199: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
      self._ref_input = torch.tensor(self.input) if input is None else torch.atleast_1d(input)
    A tensor([[1.0000, 0.1000],
            [0.1000, 1.0000]])
    B tensor([[1.7485e-07],
            [1.0000e+00]])
    C tensor([[1., 0.],
            [0., 1.]])
    D tensor([[0.],
            [0.]])
    c1 tensor([ 2.1914e-08, -1.4901e-08])
    c2 tensor([100., 100.])

    [None, None, None, None, None, None]



.. GENERATED FROM PYTHON SOURCE LINES 100-101

Jacobian computation - Find jacobians at the 5th step

.. GENERATED FROM PYTHON SOURCE LINES 101-107

.. code-block:: default


    idx = 5
    solver.set_refpoint(state=state_all[idx], input=input[idx], t=time[idx])
    [print(_v, getattr(solver, _v)) for _v in vars]

    plt.show()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A tensor([[1.0000, 0.0951],
            [0.0951, 1.0000]])
    B tensor([[0.3090],
            [1.0000]])
    C tensor([[1., 0.],
            [0., 1.]])
    D tensor([[0.],
            [0.]])
    c1 tensor([-1.4901e-08,  0.0000e+00])
    c2 tensor([5., 5.])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.065 seconds)


.. _sphx_glr_download_dynamics_floquet_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: floquet_tutorial.py <floquet_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: floquet_tutorial.ipynb <floquet_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
